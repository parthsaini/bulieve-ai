// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id
  email             String
  firstName         String
  lastName          String
  imageUrl          String?
  userName          String?      @unique
  createdSubreddits Subreddit[]
  communities       Community[]  @relation("CommunityUsers")
  createdAt         DateTime     @default(now())
  Vote              Vote[]
  Comment           Comment[]
  posts             Post[]
  Like              Like[]
  Membership        Membership[]
}

model Community {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]       @relation("CommunityUsers")
  userId      String?
  posts       Post[]
  Membership  Membership[]
}

model Membership {
  id          String   @id @default(uuid())
  userId      String
  communityId String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId]) // Ensure unique user-community pairs
}

model Subreddit {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  posts       Post[]
}

model Post {
  id          String  @id @default(uuid())
  title       String
  textContent Json?
  imageString String?

  Vote    Vote[]
  Comment Comment[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Subreddit     Subreddit? @relation(fields: [subName], references: [name])
  subName       String?
  User          User?      @relation(fields: [userId], references: [id])
  userId        String?
  Community     Community? @relation(fields: [communitySlug], references: [slug])
  communitySlug String?

  Like Like[]
}

enum TypeOfVote {
  UP
  DOWN
}

model Vote {
  id String @id @default(uuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  voteType TypeOfVote
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

enum LikeType {
  LIKE
  UNLIKE
}

model Like {
  id String @id @default(uuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  likeType LikeType @default(UNLIKE)
}

model processed_macro_economy_articles {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar
  link            String    @unique @db.VarChar
  summary         String?
  content         String?
  published_at    DateTime? @db.Timestamp(6)
  processed_at    DateTime? @db.Timestamp(6)
  relevance_score Float?
  entities        String?
}
